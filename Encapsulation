Encapsulation = Wrapping data (variables) and methods (functions) into a single class and restricting direct access to data using access specifiers.

Protects data from unauthorized access.
Accessed safely through getters and setters.

Private members → hidden from outside.
Public methods → control access safely (getters/setters).
Encapsulation protects internal data and ensures safe modification.
------------------------

#include<iostream>
using namespace std;

class Car {
    private:
        string brand;
    public:
        void setInfo(string b){           //setter
            brand = b;
        }
        
        string getInfo(){                 //getter
            return brand;
        }
        
        void drive(){                     // method
            cout << "driving " << brand << endl;
        }
};

int main(){
    Car c1;
    // c1.brand = "bmw";                     //Error its accessing private ->not allowed
    c1.setInfo("bmw");                       //safe access using public methods
    cout << c1.getInfo() << endl;  
    
    c1.drive();

}

----------------------
bmw
driving bmw


=== Code Execution Successful ===
